version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: saas_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-saas_prod}
      POSTGRES_USER: ${DB_USER:-saas_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - saas_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-saas_user} -d ${DB_NAME:-saas_prod}"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  redis:
    image: redis:7-alpine
    container_name: saas_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - saas_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: saas_web
    restart: unless-stopped
    ports:
      - "8000:8000"
    env_file:
      - .env.prod
    environment:
      - DJANGO_SETTINGS_MODULE=saas_project.settings
      - PYTHONPATH=/app
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./logs:/app/logs
    networks:
      - saas_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    labels:
      # Labels para Nginx Proxy Manager
      - "traefik.enable=false"
      - "com.docker.compose.service=web"

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: saas_celery
    restart: unless-stopped
    command: celery -A saas_project worker --loglevel=info --concurrency=2
    env_file:
      - .env.prod
    environment:
      - DJANGO_SETTINGS_MODULE=saas_project.settings
      - PYTHONPATH=/app
    volumes:
      - media_volume:/app/media
      - ./logs:/app/logs
    networks:
      - saas_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "celery -A saas_project inspect ping"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: saas_celery_beat
    restart: unless-stopped
    command: celery -A saas_project beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    env_file:
      - .env.prod
    environment:
      - DJANGO_SETTINGS_MODULE=saas_project.settings
      - PYTHONPATH=/app
    volumes:
      - ./logs:/app/logs
    networks:
      - saas_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local

networks:
  saas_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16