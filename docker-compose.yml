version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: saas_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-saas_db}
      POSTGRES_USER: ${DB_USER:-saas_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-saas_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - saas_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-saas_user} -d ${DB_NAME:-saas_db}"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: saas_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - saas_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  web:
    build: .
    container_name: saas_web
    restart: unless-stopped
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 --workers 3 --timeout 120 saas_project.wsgi:application"
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://${DB_USER:-saas_user}:${DB_PASSWORD:-saas_password}@db:5432/${DB_NAME:-saas_db}
      - REDIS_URL=redis://redis:6379/0
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - saas_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  celery:
    build: .
    container_name: saas_celery
    restart: unless-stopped
    command: celery -A saas_project worker -l info
    volumes:
      - media_volume:/app/media
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://${DB_USER:-saas_user}:${DB_PASSWORD:-saas_password}@db:5432/${DB_NAME:-saas_db}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - saas_network

  celery-beat:
    build: .
    container_name: saas_celery_beat
    restart: unless-stopped
    command: celery -A saas_project beat -l info
    volumes:
      - media_volume:/app/media
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://${DB_USER:-saas_user}:${DB_PASSWORD:-saas_password}@db:5432/${DB_NAME:-saas_db}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - saas_network

  nginx:
    image: nginx:alpine
    container_name: saas_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    networks:
      - saas_network

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

networks:
  saas_network:
    driver: bridge